{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf0d \u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Google Earth Engine \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23\u0e07\u0e32\u0e19\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19","text":"<p>\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e2d\u0e1a\u0e23\u0e21\u0e40\u0e0a\u0e34\u0e07\u0e1b\u0e0f\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23 2\u20133 \u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19 2568 \u0e08\u0e31\u0e14\u0e17\u0e33\u0e42\u0e14\u0e22 GISTNORTH \u2013 \u0e21\u0e2b\u0e32\u0e27\u0e34\u0e17\u0e22\u0e32\u0e25\u0e31\u0e22\u0e40\u0e0a\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e21\u0e48</p>"},{"location":"#_1","title":"\ud83e\udded \u0e40\u0e1b\u0e49\u0e32\u0e2b\u0e21\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49","text":"<p>\u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e19\u0e35\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33\u0e02\u0e36\u0e49\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e08\u0e49\u0e32\u0e2b\u0e19\u0e49\u0e32\u0e17\u0e35\u0e48\u0e2b\u0e19\u0e48\u0e27\u0e22\u0e07\u0e32\u0e19\u0e17\u0e49\u0e2d\u0e07\u0e16\u0e34\u0e48\u0e19 \u0e19\u0e31\u0e01\u0e27\u0e34\u0e0a\u0e32\u0e01\u0e32\u0e23 \u0e41\u0e25\u0e30\u0e19\u0e31\u0e01\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e23\u0e30\u0e1a\u0e1a\u0e20\u0e39\u0e21\u0e34\u0e2a\u0e32\u0e23\u0e2a\u0e19\u0e40\u0e17\u0e28 \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 Google Earth Engine (GEE) \u0e43\u0e19\u0e01\u0e32\u0e23\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e34\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e35\u0e1b\u0e23\u0e30\u0e2a\u0e34\u0e17\u0e18\u0e34\u0e20\u0e32\u0e1e \u0e42\u0e14\u0e22\u0e40\u0e19\u0e37\u0e49\u0e2d\u0e2b\u0e32\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e14\u0e49\u0e27\u0e22\u0e01\u0e32\u0e23\u0e1a\u0e23\u0e23\u0e22\u0e32\u0e22 \u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e42\u0e04\u0e49\u0e14 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 GEE \u0e04\u0e23\u0e2d\u0e1a\u0e04\u0e25\u0e38\u0e21\u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e40\u0e0a\u0e48\u0e19</p> <ul> <li>\u0e27\u0e34\u0e40\u0e04\u0e23\u0e32\u0e30\u0e2b\u0e4c\u0e20\u0e32\u0e1e\u0e16\u0e48\u0e32\u0e22\u0e14\u0e32\u0e27\u0e40\u0e17\u0e35\u0e22\u0e21\u0e41\u0e1a\u0e1a Cloud-based</li> <li>\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 Web App \u0e14\u0e49\u0e27\u0e22 GEE UI</li> <li>\u0e01\u0e32\u0e23\u0e08\u0e33\u0e41\u0e19\u0e01\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e17\u0e35\u0e48\u0e14\u0e34\u0e19</li> <li>\u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e32\u0e21\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e20\u0e31\u0e22\u0e1e\u0e34\u0e1a\u0e31\u0e15\u0e34 \u0e40\u0e0a\u0e48\u0e19 \u0e19\u0e49\u0e33\u0e17\u0e48\u0e27\u0e21-\u0e20\u0e31\u0e22\u0e41\u0e25\u0e49\u0e07</li> </ul>"},{"location":"#_2","title":"\ud83d\udce5 \u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14\u0e40\u0e2d\u0e01\u0e2a\u0e32\u0e23\u0e41\u0e25\u0e30\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07","text":"<ul> <li>\ud83d\udd17 PDF \u0e04\u0e39\u0e48\u0e21\u0e37\u0e2d\u0e2d\u0e1a\u0e23\u0e21 (gee_workshop.pdf)</li> <li> <p>\ud83d\udda5\ufe0f \u0e2a\u0e44\u0e25\u0e14\u0e4c\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e2d\u0e1a\u0e23\u0e21</p> </li> <li> <p>\ud83d\udcc1 \u0e42\u0e04\u0e49\u0e14\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e43\u0e19\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1a\u0e17</p> </li> </ul> \u0e1a\u0e17 \u0e2b\u0e31\u0e27\u0e02\u0e49\u0e2d 1 \u0e23\u0e39\u0e49\u0e08\u0e31\u0e01\u0e01\u0e31\u0e1a Google Earth Engine (GEE) 2 \u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19 GEE Code Editor 3 \u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e41\u0e25\u0e30\u0e41\u0e2b\u0e25\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e43\u0e19 GEE 4 \u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19 JavaScript \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a GEE 5 GEE Objects \u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e40\u0e0a\u0e34\u0e07\u0e27\u0e31\u0e15\u0e16\u0e38 6 \u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e01\u0e31\u0e1a\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e20\u0e32\u0e1e\u0e14\u0e32\u0e27\u0e40\u0e17\u0e35\u0e22\u0e21 7 \u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e2d\u0e1b\u0e1e\u0e25\u0e34\u0e40\u0e04\u0e0a\u0e31\u0e19 GEE App 8 \u0e01\u0e32\u0e23\u0e08\u0e33\u0e41\u0e19\u0e01\u0e01\u0e32\u0e23\u0e43\u0e0a\u0e49\u0e17\u0e35\u0e48\u0e14\u0e34\u0e19\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 9 \u0e01\u0e32\u0e23\u0e15\u0e34\u0e14\u0e15\u0e32\u0e21\u0e2a\u0e16\u0e32\u0e19\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e20\u0e31\u0e22\u0e1e\u0e34\u0e1a\u0e31\u0e15\u0e34"},{"location":"#_3","title":"\ud83d\udcdd \u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e17\u0e33","text":"<p>\u0e28\u0e31\u0e01\u0e14\u0e34\u0e4c\u0e14\u0e32 \u0e2b\u0e2d\u0e21\u0e2b\u0e27\u0e25 \u0e41\u0e25\u0e30\u0e0a\u0e27\u0e34\u0e28 \u0e28\u0e23\u0e35\u0e21\u0e13\u0e35 \u0e28\u0e39\u0e19\u0e22\u0e4c\u0e20\u0e39\u0e21\u0e34\u0e20\u0e32\u0e04\u0e40\u0e17\u0e04\u0e42\u0e19\u0e42\u0e25\u0e22\u0e35\u0e2d\u0e27\u0e01\u0e32\u0e28\u0e41\u0e25\u0e30\u0e20\u0e39\u0e21\u0e34\u0e2a\u0e32\u0e23\u0e2a\u0e19\u0e40\u0e17\u0e28 (\u0e20\u0e32\u0e04\u0e40\u0e2b\u0e19\u0e37\u0e2d) \u0e20\u0e32\u0e04\u0e27\u0e34\u0e0a\u0e32\u0e20\u0e39\u0e21\u0e34\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c \u0e04\u0e13\u0e30\u0e2a\u0e31\u0e07\u0e04\u0e21\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c \u0e21\u0e2b\u0e32\u0e27\u0e34\u0e17\u0e22\u0e32\u0e25\u0e31\u0e22\u0e40\u0e0a\u0e35\u0e22\u0e07\u0e43\u0e2b\u0e21\u0e48</p> <p>\ud83d\udcc5 \u0e21\u0e34\u0e16\u0e38\u0e19\u0e32\u0e22\u0e19 2568  </p> <p>CC BY-NC 4.0</p>"},{"location":"gee_workshop_chapter1/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 1","text":""},{"location":"gee_workshop_chapter1/#url-to-earth-engine-code-editor","title":"URL to Earth Engine Code Editor","text":"<p>https://earthengine.google.com</p>"},{"location":"gee_workshop_chapter2/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 2","text":""},{"location":"gee_workshop_chapter2/#url-to-earth-engine-code-editor","title":"URL to Earth Engine Code Editor","text":"<p>https://earthengine.google.com</p>"},{"location":"gee_workshop_chapter3/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 3","text":""},{"location":"gee_workshop_chapter3/#url-to-earth-engine-data-catalog","title":"URL to Earth Engine Data Catalog","text":"<p>: # https://developers.google.com/earth-engine/datasets</p>"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-api-documentation","title":"URL to Earth Engine API Documentation","text":"<p>: # https://developers.google.com/earth-engine/api_docs</p>"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-javascript-api-documentation","title":"URL to Earth Engine JavaScript API Documentation","text":"<p>: # https://developers.google.com/earth-engine/guides/getstarted</p>"},{"location":"gee_workshop_chapter3/#url-to-earth-engine-community-tutorials","title":"URL to Earth Engine Community Tutorials (\u0e41\u0e19\u0e30\u0e19\u0e33\u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e04\u0e23\u0e31\u0e1a)","text":"<p>: # https://developers.google.com/earth-engine/tutorials</p>"},{"location":"gee_workshop_chapter4/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 4","text":"<p>basic JavaScript guide for Google Earth Engine (GEE) development:</p>"},{"location":"gee_workshop_chapter4/#41-variables-and-data-types","title":"4.1 Variables and Data Types","text":"<pre><code>// 1.Variable declaration\nvar number = 42;                  // Number\nvar text = \"Hello, Earth!\";       // String\nvar boolean = true;               // Boolean\nvar list = [1, 2, 3, 4];          // Array\nvar object = {key: \"value\"};      // Object\n\n// 1.Array variable\nvar array = [1, 2, 3, 4, 5];\n// 3.Accessing array elements\nvar firstElement = array[0];      // 1\n// 4.Modifying array elements\narray[1] = 10;                   // [1, 10, 3, 4, 5]\n// 5.Object variable\nvar obj = {name: \"Earth\", age: 4.5};\nobj.name = \"Mars\";              // {name: \"Mars\", age: 4.5}\n// 6.Accessing object properties\nvar name = obj.name;            // \"Mars\"\n// Modifying object properties\nobj.age = 4.6;                 // {name: \"Mars\", age: 4.6}\n\n// 7.Earth Engine objects\nvar numList = ee.List([1, 2, 3, 4, 5]);\nvar image = ee.Image(\"LANDSAT/LC08/C01/T1/LC08_044034_20140318\");\nvar geometry = ee.Geometry.Point([-122.082, 37.42]);\n</code></pre>"},{"location":"gee_workshop_chapter4/#42-comment","title":"4.2 Comment","text":"<pre><code>// Single line comment\n/*\nMulti-line comment\n   This is a multi-line comment\n   that spans multiple lines.\n*/\n</code></pre>"},{"location":"gee_workshop_chapter4/#43-functions","title":"4.3 Functions","text":""},{"location":"gee_workshop_chapter4/#1client-side-function","title":"1.Client-side function","text":"<pre><code>// 8.function declaration \nfunction showMessage() {\n    print('Hello, Earth Engine!');\n}\n\n// 9.call the function\nshowMessage();\n\n// 10.Function with parameters\nfunction addNumbers(a, b) {\n    return a + b;\n}\nvar sum = addNumbers(5, 10);      // 15\n</code></pre>"},{"location":"gee_workshop_chapter4/#2earth-engine-function","title":"2.Earth Engine function","text":"<pre><code>// 11.Earth Engine function\nvar roi = ee.Geometry.Polygon(\n        [[[98.9171009716561, 18.815619476862654],\n          [98.9171009716561, 18.68557890893041],\n          [99.0873890575936, 18.68557890893041],\n          [99.0873890575936, 18.815619476862654]]]);\n// 12.Define a function to calculate NDVI for one image\nfunction calcNDVI(image) {\n    // Compute normalized difference of bands B8 and B4\n    return image.normalizedDifference(['B8', 'B4'])\n                .rename('NDVI');\n}\n\n// 13.Apply the function to every image in the collection\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2021-01-01', '2021-01-31')\n    .filterBounds(roi);\n\nvar ndviCollection = collection.map(calcNDVI);\n\n// 14.Compute the median composite of NDVI\nvar medianNDVI = ndviCollection.median();\n\nMap.addLayer(medianNDVI, {min: 0, max: 1}, 'Median NDVI');\n</code></pre>"},{"location":"gee_workshop_chapter4/#44-ifelse-statements","title":"4.4 if\u2026else Statements","text":""},{"location":"gee_workshop_chapter4/#1client-side-ifelse","title":"1.Client-side if\u2026else","text":"<pre><code>// 15.Client-side if\u2026else\nvar x = 7;\nvar y = 5;\n\n// 16.Simple if-else to compare JS numbers\nif (x &gt; y) {\n  print('x is greater than y');  // prints: x is greater than y\n} else if (x === y) {\n  print('x is equal to y');\n} else {\n  print('x is less than y');\n}\n</code></pre>"},{"location":"gee_workshop_chapter4/#2earth-engine-ifelse","title":"2.Earth Engine if\u2026else","text":"<pre><code>// 17.Earth Engine if\u2026else\nvar image = ee.Image('LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103');\nvar ndvi = image.normalizedDifference(['B5', 'B4']);\nvar threshold = 0.5;\nvar mask = ndvi.gt(threshold);\nvar maskedImage = image.updateMask(mask);\nMap.addLayer(maskedImage, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'Masked Image');\n\n// 18.ee.Algorithms.If\nvar condition = ee.Number(5);\nvar result = ee.Algorithms.If(condition.gt(0), 'Positive', 'Negative');\nprint('Result:', result);  \n</code></pre>"},{"location":"gee_workshop_chapter4/#45-loops","title":"4.5 Loops","text":"<pre><code>// 19.Client-side for loop\nfor (var i = 0; i &lt; 5; i++) {\n    print('Iteration:', i);\n}\n\n// 20.Client-side while loop\nvar j = 0;\nwhile (j &lt; 5) {\n    print('While loop iteration:', j);\n    j++;\n}\n\n// 21.map function\nvar numbers = [1, 2, 3, 4, 5];\nvar squaredNumbers = numbers.map(function(num) {\n    return num * num;\n});\nprint('Squared Numbers:', squaredNumbers);  // [1, 4, 9, 16, 25]\n\n// 22.Server-side for loop\nvar serverList = ee.List([1, 2, 3, 4, 5]);\nvar serverSquared = serverList.map(function(num) {\n    return ee.Number(num).multiply(ee.Number(num));\n});\nprint('Server Squared:', serverSquared);  // [1, 4, 9, 16, 25]\n\n// 23.Earth Engine map function\nvar collection = ee.ImageCollection('LANDSAT/LC08/C01/T1');\nvar ndviCollection = collection.map(function(image) {\n    return image.normalizedDifference(['B5', 'B4']).rename('NDVI');\n});\n</code></pre>"},{"location":"gee_workshop_chapter4/#46-object","title":"4.6 Object","text":"<pre><code>// 24.Object creation\nvar Car = {\n    wheels: 4,\n    door: 2,\n    start: function() {\n        print('Car started');\n        return this;  \n    }\n};\n\n// 25.Accessing object properties\nvar tota = Car;\nprint('Toyota wheels:', tota.wheels);  \ntota.color = \"red\";\nprint('Tota color:', tota.color);  \ntota.start();\n\nvar hoda = Car;\nhoda.door = 5; \nprint('Hoda door:', hoda.door); \n\n// 26.Object methods\ntota.drive = function() {\n    print('Car is driving');\n    return this;  \n};\n// tota.drive();  \n\ntota.stop = function() {\n    print('Car stopped');\n    return this;\n};\n// tota.stop();  \n\n// 27.Method chaining\ntota.start().drive().stop(); \n</code></pre>"},{"location":"gee_workshop_chapter4/#47-ee-objects-and-methods","title":"4.7 EE Objects and Methods","text":""},{"location":"gee_workshop_chapter4/#1earth-engine-objects","title":"1.Earth Engine objects","text":"<pre><code>// 28.Earth Engine objects for geometry and feature\nvar geometry = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]); \n\n// 29.methods of Earth Engine objects for geometry\nvar feature = ee.Feature(geometry, {name: 'Chiang Mai'});\nprint('Feature:', feature);  \n\n// methods of Earth Engine objects\nvar area = feature.geometry().area(); \nprint('Area:', area);  \n\n// Map methods\nMap.centerObject(feature, 10); \nMap.addLayer(feature, {color: 'red'}, 'Feature'); \n</code></pre>"},{"location":"gee_workshop_chapter4/#2earth-engine-objects-for-image-and-image-collection","title":"2.Earth Engine objects for image and image collection","text":"<pre><code>// 30.Earth Engine objects for image\nvar image = ee.Image('LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103');\n// methods of Earth Engine objects for image\nvar bandNames = image.bandNames();\nprint('Band names:', bandNames); \nvar bandCount = image.bandNames().length();\nprint('Band count:', bandCount); \nvar band4 = image.select('B4');\nprint('Band 4:', band4);  \n\nMap.centerObject(image, 10);\nMap.addLayer(image, {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3000}, 'RGB');\n\n// 31.Earth Engine objects for image collection\nvar dataset = ee.ImageCollection('LANDSAT/LC09/C02/T1_TOA')\n    .filterDate('2024-01-01', '2024-03-30') // Filter method by date;\nvar trueColor432 = dataset.select(['B4', 'B3', 'B2']);\nvar trueColor432Vis = {\n  min: 0.0,\n  max: 0.4,\n};\nMap.setCenter(98.9616, 18.7137);\nMap.addLayer(trueColor432, trueColor432Vis, 'True Color (432)');  \n</code></pre>"},{"location":"gee_workshop_chapter4/#48-method-chaining","title":"4.8 Method Chaining","text":"<pre><code>// 32.Method chaining for Earth Engine objects\nvar image = ee.Image('LANDSAT/LC09/C02/T1_TOA/LC09_131047_20240103');\nvar band4 = image.select('B4');\nvar band3 = image.select('B3');\nvar band2 = image.select('B2');\nvar rgb = band4.addBands(band3).addBands(band2);\nimage.select(['B4', 'B3', 'B2'])\nMap.centerObject(image, 10);\nMap.addLayer(image, {min: 0, max: 3000}, 'RGB');\n\n// 33.Method chaining for Earth Engine objects with ImageCollection\nvar collection = ee.ImageCollection('LANDSAT/LC09/C02/T1_TOA')\n    .filterDate('2024-01-01', '2024-03-30')\n    .filterBounds(geometry)\n    .select(['B4', 'B3', 'B2'])\n    .mean();\nMap.centerObject(geometry, 10);\nMap.addLayer(collection, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'Mean Image');\n\n// Chaining methods with functions\nfunction calculateNDVI(image) {\n    return image.normalizedDifference(['B8', 'B4']).rename('NDVI');\n}\nvar filtered = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2021-01-01', '2021-01-31')\n    .filterBounds(geometry)\n    .map(calculateNDVI)\n    .select('NDVI')\n    .mean();\nMap.centerObject(geometry, 10);\nMap.addLayer(filtered, {min: 0, max: 1}, 'Mean NDVI');\n</code></pre>"},{"location":"gee_workshop_chapter5/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 5","text":""},{"location":"gee_workshop_chapter5/#51-image","title":"5.1 Image","text":""},{"location":"gee_workshop_chapter5/#1image-object","title":"1.Image object","text":"<pre><code>// 1. Image object\nvar image = ee.Image('LANDSAT/LC09/C02/T1_L2/LC09_129050_20231220')\n              .multiply(0.0000275);\nvar band4 = image.select('SR_B4');\nvar band3 = image.select('SR_B3');\nvar band2 = image.select('SR_B2');\nvar rgb = band4.addBands(band3).addBands(band2);\nMap.centerObject(image, 10);\nMap.addLayer(rgb, {min: 0.2, max: 0.6, gamma: 2.0}, 'RGB');\n</code></pre>"},{"location":"gee_workshop_chapter5/#2image-from-imagecollection","title":"2.Image from ImageCollection","text":"<pre><code>// 2. Image from ImageCollection\nvar bangkok = ee.Geometry.Point([100.5018, 13.7563]);\n\n//3. Load Landsat 9 Surface Reflectance data\nvar landsat9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')\n  .filterBounds(bangkok)\n  .filterDate('2023-01-01', '2023-12-31')\n  .sort('CLOUD_COVER')\n  .first();\n\n// 4.Select optical bands\nvar image = landsat9.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5']);\n\n// 5. Convert optical bands to reflectance\nvar opticalBands = image.select('SR_B.').multiply(0.0000275);\n\n// 6. Set metadata properties\nvar image = opticalBands\n  .set({\n    'system:time_start': landsat9.get('system:time_start'),\n    'ACQUISITION_DATE': landsat9.date().format('YYYY-MM-dd'),\n    'SPACECRAFT_ID': landsat9.get('SPACECRAFT_ID'),\n    'CLOUD_COVER': landsat9.get('CLOUD_COVER')\n  });\n\n// 7. Print image metadata and band names\nprint('Landsat 9 Image Metadata:', image);\nprint('Acquisition Date:', image.get('ACQUISITION_DATE'));\nprint('Available Band Names:', image.bandNames());\n\n// 8. Define visualization parameters for true color\nvar trueColor = {\n  bands: ['SR_B4', 'SR_B3', 'SR_B2'],\n  min: 0.2,\n  max: 0.7,\n  gamma: 2.0\n};\n\n// 9. Add the image to the map\nMap.centerObject(bangkok, 10);\nMap.addLayer(image, trueColor, 'Landsat 9 True Color');\n</code></pre>"},{"location":"gee_workshop_chapter5/#52-image-collection","title":"5.2 Image Collection","text":"<pre><code>// 10. Image Collection object\nvar geometry = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')\n    .filterDate('2021-01-01', '2021-01-31')\n    .filterBounds(geometry)\n    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))\n    .select(['B4', 'B3', 'B2'])\n    .median()\n    .multiply(0.0001);\nMap.centerObject(geometry, 10);\nMap.addLayer(collection, {bands: ['B4', 'B3', 'B2'], min: 0.0, max: 0.3, gamma: 1.5}, 'Median Image');\n</code></pre>"},{"location":"gee_workshop_chapter5/#53-geometry","title":"5.3 Geometry","text":"<pre><code>// 11. Geometry object\nvar point = ee.Geometry.Point([98.9171009716561, 18.815619476862654]);\nvar line = ee.Geometry.LineString([[98.9171009716561, 18.815619476862654], [99.0873890575936, 18.68557890893041]]);\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar buffer = point.buffer(1000);  // Buffer of 1000 meters\nvar centroid = polygon.centroid();\nvar area = polygon.area();  // Area of the polygon\n\n// 12. Print geometries and properties\nprint('Point:', point);\nprint('Line:', line);\nprint('Polygon:', polygon);\nprint('Buffer:', buffer);\nprint('Centroid:', centroid);\nprint('Area:', area);\n// Map visualization\nMap.centerObject(polygon, 10);\nMap.addLayer(point, {color: 'yellow'}, 'Point');\nMap.addLayer(line, {color: 'orange'}, 'Line');\nMap.addLayer(polygon, {color: 'red'}, 'Polygon');\nMap.addLayer(buffer, {color: 'blue'}, 'Buffer');  \nMap.addLayer(centroid, {color: 'green'}, 'Centroid');  \n</code></pre>"},{"location":"gee_workshop_chapter5/#54-feature","title":"5.4 Feature","text":"<pre><code>// 13. Feature object\nvar point = ee.Geometry.Point([98.9171009716561, 18.815619476862654]);\nvar feature = ee.Feature(point, {name: 'Chiang Mai', population: 1000000});\nprint('Feature:', feature);\n\n// Polygon feature\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar feature = ee.Feature(polygon, {name: 'Chiang Mai', population: 1000000});\nprint('Feature:', feature);\n// add to map\nMap.centerObject(feature, 10);\nMap.addLayer(feature, {color: 'red'}, 'Feature');\n</code></pre>"},{"location":"gee_workshop_chapter5/#55-feature-collection","title":"5.5 Feature Collection","text":"<pre><code>// 14. Feature Collection object\nvar point1 = ee.Geometry.Point([98.9171009716561, 18.815619476862654]);\nvar point2 = ee.Geometry.Point([99.0873890575936, 18.68557890893041]);\nvar feature1 = ee.Feature(point1, {name: 'Chiang Mai', population: 1000000});\nvar feature2 = ee.Feature(point2, {name: 'Sarapee', population: 8000000});\nvar featureCollection = ee.FeatureCollection([feature1, feature2]);\nprint('Feature Collection:', featureCollection);\n// add to map\nMap.centerObject(featureCollection, 10);\nMap.addLayer(featureCollection, {color: 'red'}, 'Feature Collection');\n</code></pre>"},{"location":"gee_workshop_chapter5/#56-reducer","title":"5.6 Reducer","text":"<pre><code>// 15. Reducer object across time\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2021-01-01','2021-12-31')\n           .filterBounds(polygon);\n\n// Compute per-pixel mean across time\nvar meanTime = s2.reduce(ee.Reducer.mean());\n\nMap.addLayer(meanTime, {bands:['B4_mean','B3_mean','B2_mean'], min:0, max:3000}, 'Mean per Pixel over Time');\n</code></pre>"},{"location":"gee_workshop_chapter5/#1histogram","title":"1.Histogram","text":"<pre><code>// 16. Histogram\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2021-01-01','2021-12-31')\n           .filterBounds(polygon);\nvar months = ee.List.sequence(1, 12);\n\nvar monthlyCount = months.map(function(m) {\n  var filtered = s2.filter(ee.Filter.calendarRange(m, m, 'month'));\n  return filtered.size();\n});\n\nprint('Images per month (2021):', monthlyCount);\n\n// add histogram chart\nvar chart = ui.Chart.array.values(monthlyCount, 0, months)\n    .setChartType('ColumnChart')\n    .setOptions({\n      title: 'Monthly Image Count (2021)',\n      hAxis: {title: 'Month'},\n      vAxis: {title: 'Image Count'},\n      legend: {position: 'none'}\n    });\nprint(chart);\n</code></pre>"},{"location":"gee_workshop_chapter5/#2image-statistics-reduceregion","title":"2.Image statistics (reduceRegion)","text":"<pre><code>// 17. Regional statistics (reduceRegion)\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2021-01-01','2021-03-31')\n           .filterBounds(polygon);\nvar meanTime = s2.reduce(ee.Reducer.mean());\n\n// Regional statistics (reduceRegion)\nvar stats = meanTime.reduceRegion({\n  reducer: ee.Reducer.mean().combine({\n    reducer2: ee.Reducer.max(),\n    sharedInputs: true\n  }),\n  geometry: polygon,\n  scale: 30\n});\nprint('Mean &amp; Max over polygon:', stats);\n</code></pre>"},{"location":"gee_workshop_chapter5/#3neighborhood-focal-operations-reduceneighborhood","title":"3.Neighborhood / Focal operations (reduceNeighborhood)","text":"<pre><code>// 18. Neighborhood / Focal operations (reduceNeighborhood)\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2021-01-01','2021-12-31')\n           .filterBounds(polygon);\nvar meanTime = s2.reduce(ee.Reducer.mean());\n// Neighborhood / Focal operations (reduceNeighborhood)\nvar focalMean = meanTime.reduceNeighborhood({\n  reducer: ee.Reducer.mean(),\n  kernel: ee.Kernel.square({radius: 1})\n});\nMap.addLayer(focalMean, {min:0, max:3000}, '3\u00d73 Focal Mean');\n</code></pre>"},{"location":"gee_workshop_chapter5/#4reduce-minmax","title":"4.Reduce minMax","text":"<pre><code>var minMax = dataset.reduceRegion({\n  reducer: ee.Reducer.minMax(),\n  geometry: geometry,\n  scale: 100,\n  maxPixels: 1e9\n});\nprint('\u0e04\u0e48\u0e32 min/max \u0e02\u0e2d\u0e07 NDVI:', minMax);\n</code></pre>"},{"location":"gee_workshop_chapter5/#5per-band-summary-reduceregion-on-multiband","title":"5.Per-band summary (reduceRegion on multiband)","text":"<pre><code>// 19. Per-band summary (reduceRegion on multiband)\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2021-01-01','2021-03-31')\n           .filterBounds(polygon);\nvar composite = s2.median();\nvar bandStats = composite.reduceRegion({\n  reducer: ee.Reducer.mean(),\n  geometry: polygon,\n  scale: 100\n});\nprint('Mean per band:', bandStats);\n</code></pre>"},{"location":"gee_workshop_chapter5/#6across-band-summary-reduceregion-on-multiband","title":"6.Across-band summary (reduceRegion on multiband)","text":"<pre><code>// 20. Across-band reduction (reduce)\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2021-01-01','2021-12-31')\n           .filterBounds(polygon)  \n           .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))\n           .select(['B8', 'B4']);\n\nvar ndviCollection = s2.map(function(img) {\n  var ndvi = img.normalizedDifference(['B8', 'B4']).rename('NDVI');\n  return ndvi.copyProperties(img, img.propertyNames());\n});\n\nvar meanNDVI = ndviCollection.reduce(ee.Reducer.mean());\nMap.addLayer(meanNDVI, {min: -1.0, max: 1.0}, 'mean across Bands');\n</code></pre>"},{"location":"gee_workshop_chapter5/#57-join","title":"5.7 join","text":"<pre><code>// 21. Join operation\nvar points = ee.FeatureCollection([\n  ee.Feature(ee.Geometry.Point([100.5,13.7]), {pid:1}),\n  ee.Feature(ee.Geometry.Point([100.55,13.75]), {pid:2})\n]);\nvar polygons = ee.FeatureCollection([\n  ee.Feature(ee.Geometry.Rectangle([100.4,13.6,100.6,13.8]), {zone: 'A'}),\n  ee.Feature(ee.Geometry.Rectangle([100.45,13.65,100.65,13.85]), {zone: 'B'})\n]);\n\n// Create a spatial filter: point within polygon\nvar spatialFilter = ee.Filter.contains({\n  leftField: '.geo',    // polygon geometry\n  rightField: '.geo'    // point geometry\n});\n\n// Perform an inner spatial join\nvar spatialJoin = ee.Join.inner();\nvar spatialJoined = spatialJoin.apply(polygons, points, spatialFilter);\n\n// Attach point property 'pid' to each polygon\nvar result = spatialJoined.map(function(f) {\n  var poly = ee.Feature(f.get('primary'));\n  var pt   = ee.Feature(f.get('secondary'));\n  return poly.set('point_id', pt.get('pid'));\n});\n\n// Display on the map\nMap.centerObject(polygons, 10);\n\n// Polygons in blue\nMap.addLayer(polygons, {color: 'blue'}, 'Polygons');\n\n// Points in black\nMap.addLayer(points, {color: 'black'}, 'Points');\n\n// Spatially-joined polygons with attached pid in purple\nMap.addLayer(result, {color: 'purple'}, 'Spatial Join');\n</code></pre>"},{"location":"gee_workshop_chapter6/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 6","text":""},{"location":"gee_workshop_chapter6/#61-images-properties","title":"6.1 images properties","text":"<pre><code>// 1. images properties\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2025-01-01', '2025-03-31')\n    .filterBounds(polygon)\n    .select(['B4', 'B3', 'B2']) \n\n// 2. get properties of the image collection\n// get image count\nvar imageCount = collection.size();\nprint('Image Count:', imageCount); \n// get image list\nvar imageList = collection.toList(imageCount);\nprint('Image List:', imageList);  \n// get first image\nvar firstImage = ee.Image(imageList.get(0));\nprint('First Image:', firstImage); \n// get image properties\nvar imageProperties = firstImage.propertyNames();\nprint('Image Properties:', imageProperties); \n// get image bands\nvar imageBands = firstImage.bandNames();\nprint('Image Bands:', imageBands);  \n// get image metadata\nvar imageMetadata = firstImage.getInfo();\nprint('Image Metadata:', imageMetadata);  \n// get image date\nvar imageDate = firstImage.date();\nprint('Image Date:', imageDate); \n// get image geometry\nvar imageGeometry = firstImage.geometry();\nprint('Image Geometry:', imageGeometry); \n// get image scale\nvar imageScale = firstImage.select('B4').projection().nominalScale();\nprint('Image Scale:', imageScale);  \n// get image projection\nvar imageProjection = firstImage.select('B4').projection();\nprint('Image Projection:', imageProjection); \n\nMap.centerObject(polygon, 10);\nMap.addLayer(collection, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'Image Collection');\n</code></pre>"},{"location":"gee_workshop_chapter6/#62-map-object","title":"6.2 Map object","text":"<pre><code>// 3. Map object\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2025-01-01', '2025-03-31')\n    .filterBounds(polygon)\nMap.centerObject(collection, 8); \nMap.addLayer(\n  collection,             // eeObject\n  {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, // visParams\n  'Image Collection',      // name\n  true,                   // shown (hidden by default)\n  0.8                      // opacity (80% transparent)\n);\n</code></pre>"},{"location":"gee_workshop_chapter6/#63-viuslization","title":"6.3 Viuslization","text":"<pre><code>// 4. study area\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\n// 5. vector visualization\nvar countries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')\n    .filter(ee.Filter.eq('country_na', 'Thailand'));\n\nvar countryStyle = {\n  color: 'FF0000',            // Red outline\n  fillColor: 'FF000022',      // Translucent red fill\n  width: 1                    // 1-pixel wide border\n};\n\nMap.addLayer(\n  countries,                // eeObject\n  countryStyle,             // visParams\n  'Country Borders',        // name\n  false,                    // shown (hidden by default)\n  1.0                       // opacity (fully opaque)\n);\n\n// 6. ImageCollection visualization\nvar countryStyle = {\n  color: 'FF0000',            // Red outline\n  fillColor: 'FF000022',      // Translucent red fill\n  width: 1                    // 1-pixel wide border\n};\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2025-01-01', '2025-03-31')\n    .filterBounds(polygon);\n\nvar rgbVis = {\n  bands: ['B4', 'B3', 'B2'],  // Use red, green, blue bands\n  min: 0,                     // Map pixel values from 0\n  max: 3000,                  // to 3000\n  gamma: 1.1                  // Apply slight gamma correction\n};\n\nMap.centerObject(collection, 8);\nMap.addLayer(\n  collection,               // eeObject\n  rgbVis,                   // visParams\n  'Sentinel-2 RGB',         // name\n  true,                     // shown\n  0.8                       // opacity\n);\n\n// 7. Image visualization\nvar dem = ee.Image('USGS/SRTMGL1_003');\nvar demVis = {\n  min: 0,                      // lowest elevation (meters)\n  max: 3000,                   // highest elevation (meters)\n  palette: [\n    '0000ff',                  // deep water (if below 0)\n    '00ffff',                  // sea level\n    '00ff00',                  // lowlands\n    'ffff00',                  // mid elevations\n    'ff7f00',                  // high elevations\n    'ffffff'                   // peaks\n  ]\n};\n\nMap.addLayer(\n  dem,                     // eeObject\n  demVis,                  // visParams\n  'SRTM DEM',              // name\n  false,                   // shown (hidden by default)\n  0.5                      // opacity (50% transparent)\n);\n</code></pre>"},{"location":"gee_workshop_chapter6/#64-filter","title":"6.4 Filter","text":"<pre><code>// 8. Filter\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2025-01-01', '2025-03-31')   // Filter method by date\nMap.addLayer(collection, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'Image Collection');\n\n// Filter by bounds\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2025-01-01', '2025-03-31')   // Filter method by date\n    .filterBounds(polygon)                    // Filter method by bounds\nMap.centerObject(polygon, 10);\nMap.addLayer(collection, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'Image Collection');\n\n// Filter by cloudy pixel percentage\nvar collection = ee.ImageCollection('COPERNICUS/S2')\n    .filterDate('2025-01-01', '2025-03-31')   // Filter method by date\n    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))  // Filter method by property\n    .filterBounds(polygon)                    // Filter method by bounds\nMap.centerObject(polygon, 10);\nMap.addLayer(collection, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'Image Collection');\n\n// Filter country\nvar countries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')\n    .filter(ee.Filter.eq('country_na', 'Thailand'));  // Filter method by property\nMap.centerObject(countries, 10);\nMap.addLayer(countries, {color: 'red'}, 'Country');\n</code></pre>"},{"location":"gee_workshop_chapter6/#65-band-and-band-selection","title":"6.5 Band and band selection","text":""},{"location":"gee_workshop_chapter6/#1create-a-median-composite-and-select-bands","title":"1.Create a median composite and select bands","text":"<pre><code>// 9. Create a median composite and select bands\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\n// Load the Sentinel-2 ImageCollection and filter by date &amp; ROI\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\n\n// Create a median composite from the collection\nvar composite = s2.median();\n\n// Print band names and image property keys to the Console\nprint('Band names:', composite.bandNames());\nprint('Image property names:', composite.propertyNames());\n\n// Define visualization parameters\n//    True Color: Red = B4, Green = B3, Blue = B2\nvar trueColorVis = {\n  bands: ['B4', 'B3', 'B2'],\n  min:   0,\n  max:   3000,\n  gamma: 0.5\n};\n\n// False Color (NIR + Red + Green): NIR = B8, Red = B4, Green = B3\nvar falseColorVis = {\n  bands: ['B8', 'B4', 'B3'],\n  min:   0,\n  max:   3000,\n  gamma: 0.5\n};\n\n// Center the Map on the composite and add the layers\nMap.centerObject(polygon);  \nMap.addLayer(composite, trueColorVis,  'True Color Composite');\nMap.addLayer(composite, falseColorVis, 'False Color Composite', false, 0.8);\n</code></pre>"},{"location":"gee_workshop_chapter6/#2band-selection-and-add-to-new-object","title":"2.Band selection and add to new object","text":"<pre><code>// 10. Band selection and add to new object\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n\n// Load the Sentinel-2 ImageCollection and filter by date &amp; ROI\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\n\n// Create a median composite from the collection\nvar composite = s2.median();\n\n// Select single bands\nvar band4 = composite.select('B4');\nvar band3 = composite.select('B3');\nvar band2 = composite.select('B2');\n\n// rename bands\nband4 = band4.rename('Red');\nband3 = band3.rename('Green');\nband2 = band2.rename('Blue');\nvar rgbSingleBand = band4.addBands(band3).addBands(band2);\n\n// Select multiple bands name\nvar rgbMultiBand = composite.select(['B4', 'B3', 'B2']);\n\nMap.centerObject(polygon, 10);\nMap.addLayer(rgbSingleBand, {min: 0, max: 3000}, 'RGB select from single band');\nMap.addLayer(rgbMultiBand, {min: 0, max: 3000}, 'RGB select from multiple band');\n</code></pre>"},{"location":"gee_workshop_chapter6/#66-band-math","title":"6.6 Band math","text":""},{"location":"gee_workshop_chapter6/#1calculate-ndvi-using-band-math","title":"1.Calculate NDVI using band math","text":"<pre><code>// 11. Calculate NDVI using band math\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]); \n\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\n\n// Create a median composite from the collection\nvar composite = s2.median();\n// Select bands for NDVI calculation\nvar nirBand = composite.select('B8');  // NIR band\nvar redBand = composite.select('B4');  // Red band\n\nMap.centerObject(polygon, 10);\nMap.addLayer(composite, {bands: ['B4', 'B3', 'B2'], min: 0, max: 3000}, 'RGB Composite');\n\n// Calculate NDVI\nvar ndvi = nirBand.subtract(redBand).divide(nirBand.add(redBand)).rename('NDVI');\n\n// Add NDVI to the composite\nvar compositeWithNDVI = composite.addBands(ndvi);\n\n// Print NDVI image\nprint('NDVI Image:', compositeWithNDVI);\n\n// Define visualization parameters for NDVI\nvar ndviVis = {\n  min: -1,\n  max: 1,\n  palette: ['blue', 'white', 'green']\n};\n\n// Add NDVI layer to the map\nMap.addLayer(compositeWithNDVI.select('NDVI'), ndviVis, 'NDVI');\n</code></pre>"},{"location":"gee_workshop_chapter6/#2calculate-ndvi-using-normalizeddifference-method","title":"2.Calculate NDVI using normalizedDifference() method","text":"<pre><code>// 12. Calculate NDVI using normalizedDifference() method\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\n// Create a median composite from the collection\nvar composite = s2.median();\n// Select bands for NDVI calculation\nvar nirBand = composite.select('B8');  // NIR band\nvar redBand = composite.select('B4');  // Red band\n// normalizedDifference() method\nvar ndvi = composite.normalizedDifference(['B8', 'B4']).rename('NDVI');\n// Add NDVI to the composite\nvar compositeWithNDVI = composite.addBands(ndvi);\n// Print NDVI image\nprint('NDVI Image:', compositeWithNDVI);\n// Define visualization parameters for NDVI\nvar ndviVis = {\n  min: -1,\n  max: 1,\n  palette: ['blue', 'white', 'green']\n};\n// Add NDVI layer to the map\nMap.addLayer(compositeWithNDVI.select('NDVI'), ndviVis, 'NDVI');    \n</code></pre>"},{"location":"gee_workshop_chapter6/#3calculate-evi-using-imageexpression-and-band-math","title":"3.Calculate EVI using image.expression() and band math","text":"<pre><code>// 13. Calculate EVI using image.expression() and band math\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\n// Create a median composite from the collection\nvar composite = s2.median();\n\n// Select bands for EVI calculation\nvar nirBand = composite.select('B8');  // NIR band\nvar redBand = composite.select('B4');  // Red band\nvar blueBand = composite.select('B2');  // Blue band\n\n// Calculate EVI with image.expression\nvar evi_exp = composite.expression(\n  '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {\n    'NIR': nirBand,\n    'RED': redBand,\n    'BLUE': blueBand\n}).rename('EVIexp');\n\n// Calculate EVI with band math\nvar evi_funct = nirBand.subtract(redBand).divide(nirBand.add(redBand.multiply(6)).subtract(blueBand.multiply(7.5)).add(1)).multiply(2.5).rename('EVIfunct');\n\n// Add EVI to the composite\nvar compositeWithEVIexp = composite.addBands(evi_exp);\nvar compositeWithEVIfunct = composite.addBands(evi_funct);\n\n// Print EVI image\nprint('EVI Image:', compositeWithEVIexp);\nprint('EVI Image:', compositeWithEVIfunct);\n// Define visualization parameters for EVI\nvar eviVis = {\n  min: -1,\n  max: 1,\n  palette: ['blue', 'white', 'green']\n};\n// Add EVI layer to the map \nMap.addLayer(compositeWithEVIexp.select('EVIexp'), eviVis, 'EVI');\nMap.addLayer(compositeWithEVIfunct.select('EVIfunct'), eviVis, 'EVI');\n</code></pre>"},{"location":"gee_workshop_chapter6/#67-clipping","title":"6.7 Clipping","text":""},{"location":"gee_workshop_chapter6/#1clipping-an-image-with-a-polygon","title":"1.Clipping an image with a polygon","text":"<pre><code>// 14. Clipping an image with a polygon\nvar polygon = ee.Geometry.Polygon(\n    [[[98.39692831218161, 18.837049183879376],\n          [98.39692831218161, 18.66149307399751],\n          [99.62739706218161, 18.66149307399751],\n          [99.62739706218161, 18.837049183879376]]]);\n\nvar dem = ee.Image('USGS/SRTMGL1_003');\n\n// Clip the DEM with polygon\nvar clippedDem = dem.clip(polygon);\nMap.centerObject(polygon, 10);\nMap.addLayer(clippedDem, {palette: ['#a6611a','#dfc27d','#f5f5f5','#80cdc1','#018571'], min: 250, max: 1000}, 'Clipped DEM');\n</code></pre>"},{"location":"gee_workshop_chapter6/#2clipping-an-image-collection-with-a-polygon","title":"2.Clipping an image collection with a polygon","text":"<pre><code>// 15. Clipping an image collection with a polygon\nvar polygon = ee.Geometry.Polygon(\n    [[[98.39692831218161, 18.837049183879376],\n          [98.39692831218161, 18.66149307399751],\n          [99.62739706218161, 18.66149307399751],\n          [99.62739706218161, 18.837049183879376]]]);\n\nfunction clipImage(image) {\n  return image.clip(polygon);\n}\nvar clippedComposite = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon)\n           .map(clipImage)\n           .median()\nMap.centerObject(polygon, 10);\nMap.addLayer(clippedComposite, {bands: ['B4', 'B3', 'B2'], min: 500, max: 3000}, 'Clipped Composite');\n</code></pre>"},{"location":"gee_workshop_chapter6/#68-import-data-from-assets","title":"6.8 Import data from assets","text":"<pre><code>// 16. Import data from assets\nvar cm_province = ee.FeatureCollection(\"projects/ee-sakda-451407/assets/cm_province_4326\");\n\n// define visualization parameters\nvar visParams = {\n  color: 'red',\n  width: 1\n};\n\nMap.centerObject(cm_province);\nMap.addLayer(cm_province, visParams, 'Chiang Mai Province');\n</code></pre>"},{"location":"gee_workshop_chapter6/#69-export-data","title":"6.9 Export data","text":""},{"location":"gee_workshop_chapter6/#1export-an-image-to-google-drive","title":"1.Export an image to Google Drive","text":"<pre><code>// 17. Export an image to Google Drive\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\nvar composite = s2.median();\n// Select bands for NDVI calculation\nvar nirBand = composite.select('B8');  // NIR band\nvar redBand = composite.select('B4');  // Red band\n// Calculate NDVI \nvar ndvi = composite.normalizedDifference(['B8', 'B4']).rename('NDVI');\n// Add NDVI to the composite\nvar compositeWithNDVI = composite.addBands(ndvi);\n// Export the NDVI image to Google Drive\nExport.image.toDrive({\n  image: compositeWithNDVI.select('NDVI'),\n  description: 'NDVI_Export',\n  scale: 30,\n  region: polygon,\n  maxPixels: 1e13\n});\n</code></pre>"},{"location":"gee_workshop_chapter6/#2export-a-feature-collection-to-google-drive","title":"2.Export a feature collection to Google Drive","text":"<pre><code>// 18. Export a feature collection to Google Drive\nvar countries = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017');\nvar thailandBorder = countries.filter(ee.Filter.eq('country_na', 'Thailand'));\n// Export the feature collection to Google Drive\nExport.table.toDrive({\n  collection: thailandBorder,\n  description: 'CM_Province_Export',\n  fileFormat: 'SHP'\n});\n</code></pre>"},{"location":"gee_workshop_chapter6/#3export-an-image-to-google-earth-engine-assets","title":"3.Export an image to Google Earth Engine assets","text":"<pre><code>// 19. Export an image to Google Earth Engine assets\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon);\nvar composite = s2.median();\n// Select bands for NDVI calculation\nvar nirBand = composite.select('B8');  // NIR band\nvar redBand = composite.select('B4');  // Red band\n// Calculate NDVI\nvar ndvi = composite.normalizedDifference(['B8', 'B4']).rename('NDVI');\n// Add NDVI to the composite\nvar compositeWithNDVI = composite.addBands(ndvi);\n// Export the NDVI image to Google Earth Engine assets\nExport.image.toAsset({\n  image: compositeWithNDVI.select('NDVI'),\n  description: 'NDVI_Export_Asset',\n  assetId: 'projects/your_project/assets/NDVI_Export_Asset', // Change 'your_project' to your project ID\n  scale: 30,\n  region: polygon,\n  maxPixels: 1e13\n});\n</code></pre>"},{"location":"gee_workshop_chapter7/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 7","text":""},{"location":"gee_workshop_chapter7/#71-create-ui-panel","title":"7.1 Create UI Panel","text":"<pre><code>// Create the left \u201clayer\u201d panel\nvar layerPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    width: '300px',\n    backgroundColor: '#fff',\n    padding: '8px'\n  }\n});\nlayerPanel.add(ui.Label('Layers', {fontWeight: 'bold'}));\n\n// Create the centre map panel\nvar mapPanel = ui.Map();\nmapPanel.setControlVisibility({all: true, zoomControl: true});\nmapPanel.style().set({stretch: 'both'});  // fill available space\nmapPanel.setCenter(100.5, 13.7, 8);\n\n// Create the right \u201cchart\u201d panel\nvar chartPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    width: '300px',\n    backgroundColor: '#fff',\n    padding: '8px'\n  }\n});\nchartPanel.add(ui.Label('Chart', {fontWeight: 'bold'}));\n\n// Combine all three in a horizontal root panel\nvar root = ui.Panel({\n  layout: ui.Panel.Layout.flow('horizontal'),\n  style: {stretch: 'both'}\n});\nroot.add(layerPanel);\nroot.add(mapPanel);\nroot.add(chartPanel);\n\n// Render\nui.root.clear();\nui.root.add(root);\n</code></pre>"},{"location":"gee_workshop_chapter7/#72-add-layers","title":"7.2 Add layers","text":"<pre><code>// Add layers\nvar polygon = ee.Geometry.Polygon(\n    [[[98.9171009716561, 18.815619476862654],\n      [98.9171009716561, 18.68557890893041],\n      [99.0873890575936, 18.68557890893041],\n      [99.0873890575936, 18.815619476862654]]]);\n// convert polygon to polyline\nvar polyline = polygon.bounds().coordinates().get(0);\n\n// Clip function\nfunction clipImage(image) {\n  return image.clip(polygon);\n}\n\n// Calculate NDVI function\nfunction calculateNDVI(image) {\n  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');\n  return image.addBands(ndvi);\n}\n\n// Create a polyline feature\nvar polylineFeature = ee.Feature(ee.Geometry.LineString(polyline), {name: 'Polygon Boundary'});\nvar s2 = ee.ImageCollection('COPERNICUS/S2')\n           .filterDate('2025-02-01', '2025-06-28')\n           .filterBounds(polygon)\n           .map(clipImage)\n           .map(calculateNDVI);\n\nvar composite = s2.median();\n\n// Select bands for NDVI calculation\nvar nirBand = composite.select('B8');  // NIR band\nvar redBand = composite.select('B4');  // Red band\n\n// Calculate NDVI\nvar ndvi = composite.normalizedDifference(['B8', 'B4']).rename('NDVI');\n\n// Add NDVI to the composite\nvar compositeWithNDVI = composite.addBands(ndvi);\n\n// Define visualization parameters for NDVI\nvar ndviVis = {\n  min: -1,\n  max: 1,\n  palette: ['blue', 'white', 'green']\n};\n\n// Define visualization parameters for the composite\nvar compositeVis = {\n  bands: ['B4', 'B3', 'B2'],\n  min: 1000,\n  max: 2700,\n  gamma: 0.5\n};\n\n// Create an NDVI layer\nvar ndviLayer = ui.Map.Layer(\n  compositeWithNDVI.select('NDVI'), \n  ndviVis, \n  'NDVI',\n  true, \n  0.9\n);\n\n// Add the NDVI layer to the map\nmapPanel.add(ndviLayer);\n\n// Add the polyline feature to the map\nvar polylineLayer = ui.Map.Layer(\n  polylineFeature.geometry(), \n  {color: 'red', width: 2}, \n  'Polygon Boundary'\n);\n\n// Add the polyline layer to the map\nmapPanel.add(polylineLayer);\n\n// Create a true color layer\nvar trueColorLayer = ui.Map.Layer(\n  composite, compositeVis, \n  'True Color Composite', \n  true, \n  0.9\n);\n\n// Add the true color layer to the map\nmapPanel.add(trueColorLayer);\n\n// Set center the map on the polygon\nmapPanel.centerObject(polygon); \n</code></pre>"},{"location":"gee_workshop_chapter7/#73-add-checkboxes","title":"7.3 Add checkboxes","text":"<pre><code>// Add checkboxes to the layer panel\n// Checkbox for NDVI\nvar ndviCheckbox = ui.Checkbox({\n  label: 'NDVI',\n  value: true,\n  onChange: function(checked) {\n    if (checked) {\n      mapPanel.layers().add(ndviLayer);\n    } else {\n      mapPanel.layers().remove(ndviLayer);\n    }\n  }\n});\n\n// Add the checkbox to the layer panel\nlayerPanel.add(ndviCheckbox);\n\n// Checkbox for True Color\nvar trueColorCheckbox = ui.Checkbox({\n  label: 'True Color',\n  value: true,\n  onChange: function(checked) {\n    if (checked) {\n      mapPanel.layers().add(trueColorLayer);\n    } else {\n      mapPanel.layers().remove(trueColorLayer);\n    }\n  }\n});\n\n// Add the checkbox to the layer panel\nlayerPanel.add(trueColorCheckbox);\n\n// Checkbox for Polygon Boundary\nvar polylineCheckbox = ui.Checkbox({\n  label: 'Polygon Boundary',\n  value: true,\n  onChange: function(checked) {\n    if (checked) {\n      mapPanel.layers().add(polylineLayer);\n    } else {\n      mapPanel.layers().remove(polylineLayer);\n    }\n  }\n});\n\n// Add the checkbox to the layer panel\nlayerPanel.add(polylineCheckbox);\n</code></pre>"},{"location":"gee_workshop_chapter7/#74-add-chart-buttons","title":"7.4 Add chart buttons","text":"<pre><code>// Add a button to the chart panel\nvar chartButton = ui.Button({\n  label: 'Show NDVI Chart',\n  onClick: function() {\n    // Create a chart for NDVI\n    var chart = ui.Chart.image.histogram({\n      image: compositeWithNDVI.select('NDVI'),\n      region: polygon,\n      scale: 30,\n      minBucketWidth: 0.01\n    }).setOptions({\n      title: 'NDVI Histogram',\n      hAxis: {title: 'NDVI'},\n      vAxis: {title: 'Frequency'},\n      lineWidth: 1,\n      pointSize: 0\n    });\n    // Add the chart to the chart panel\n    chartPanel.add(chart);\n  }\n});\n\n// Add the button to the chart panel\nchartPanel.add(chartButton);\n\nvar timeSeriesButton = ui.Button({\n  label: 'Show NDVI Time Series',\n  onClick: function() {\n    // Create a time series chart for NDVI\n    var timeSeriesChart = ui.Chart.image.series({\n      imageCollection: s2.select('NDVI'),\n      region: polygon,\n      scale: 30,\n      xProperty: 'system:time_start'\n    }).setOptions({\n      title: 'NDVI Time Series',\n      vAxis: {title: 'NDVI'},\n      lineWidth: 1,\n      pointSize: 0\n    });\n    // Add the chart to the chart panel\n    chartPanel.add(timeSeriesChart);\n  }\n});\n\n// Add the time series button to the chart panel\nchartPanel.add(timeSeriesButton);\n</code></pre>"},{"location":"gee_workshop_chapter8/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 8","text":""},{"location":"gee_workshop_chapter8/#81-land-use-and-land-cover-classification-with-google-earth-engine","title":"8.1 Land use and Land Cover Classification with Google Earth Engine","text":""},{"location":"gee_workshop_chapter8/#1define-region-of-interest-and-load-training-data","title":"1.Define region of interest and load training data","text":"<pre><code>// 1. Supervised land-use classification (5 classes) using Sentinel-2 at two time periods\nvar roi  = ee.Geometry.Polygon([[[98.65287970599341, 17.722345177988142],\n          [98.65287970599341, 17.518162943397694],\n          [98.91105841693091, 17.518162943397694],\n          [98.91105841693091, 17.722345177988142]]]);\n</code></pre>"},{"location":"gee_workshop_chapter8/#2load-training-data","title":"2.Load training data","text":"<pre><code>// 2. Load training data (FeatureCollection of points or polygons with a property 'landcover' 0\u20134)\n//    You must prepare this asset with 5 classes: e.g. 0=Water,1=Urban,2=Agriculture,3=Forest,4=Bare\nvar trainingFC = ee.FeatureCollection(\"projects/ee-sakda-451407/assets/trainning\");\n\nprint(trainingFC);\n</code></pre>"},{"location":"gee_workshop_chapter8/#3load-sentinel-2-data-and-build-composites-for-two-date-ranges","title":"3.Load Sentinel-2 data and build composites for two date ranges","text":"<pre><code>// 3. Load Sentinel-2 and build composites for two date ranges\nvar start1 = '2019-01-01', end1 = '2019-01-31';\nvar start2 = '2025-01-01', end2 = '2025-01-31';\n\nfunction makeComposite(start, end) {\n  return ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')\n    .filterDate(start, end)\n    .filterBounds(roi)\n    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))\n    .median()\n    .clip(roi);\n}\n\nvar comp1 = makeComposite(start1, end1);\nvar comp2 = makeComposite(start2, end2);\n</code></pre>"},{"location":"gee_workshop_chapter8/#4select-spectral-bands-sample-training-data-train-classifiers-and-classify-images","title":"4.Select spectral bands, sample training data, train classifiers, and classify images","text":"<pre><code>// 4. Select spectral bands for classification\nvar bands = ['B2','B3','B4','B8','B11','B12'];  // Blue, Green, Red, NIR, SWIR1, SWIR2\n</code></pre>"},{"location":"gee_workshop_chapter8/#5sample-the-composites-at-the-training-points","title":"5.Sample the composites at the training points","text":"<pre><code>// 5. Sample the composites at the training points\nvar samples1 = comp1.select(bands).sampleRegions({\n  collection: trainingFC,\n  properties: ['landcover'],\n  scale: 10,\n  geometries: true\n});\n\nvar samples2 = comp2.select(bands).sampleRegions({\n  collection: trainingFC,\n  properties: ['landcover'],\n  scale: 10,\n  geometries: true\n});\n</code></pre>"},{"location":"gee_workshop_chapter8/#6train-classifiers-and-classify-the-composites","title":"6.Train classifiers and classify the composites","text":"<pre><code>// 6. Train classifiers (Random Forest) for each period\nvar classifier1 = ee.Classifier.smileRandomForest(100)\n                    .train({\n                      features: samples1,\n                      classProperty: 'landcover',\n                      inputProperties: bands\n                    });\n\nvar classifier2 = ee.Classifier.smileRandomForest(100)\n                    .train({\n                      features: samples2,\n                      classProperty: 'landcover',\n                      inputProperties: bands\n                    });\n</code></pre>"},{"location":"gee_workshop_chapter8/#7classify-the-composites-and-define-a-color-palette","title":"7.Classify the composites and define a color palette","text":"<pre><code>// 7. Classify the composites\nvar classified1 = comp1.select(bands).classify(classifier1);\nvar classified2 = comp2.select(bands).classify(classifier2);\n</code></pre>"},{"location":"gee_workshop_chapter8/#8define-a-color-palette-for-visualization","title":"8.Define a color palette for visualization","text":"<pre><code>// 8. Define a 4-class palette\nvar palette = [\n  '0000FF',  // 0 = Water (blue)\n  'FF0000',  // 1 = Urban (red)\n  '00FF00',  // 2 = Agriculture (green)\n  '007F00',  // 3 = Forest (dark green)\n];\n</code></pre>"},{"location":"gee_workshop_chapter8/#9display-the-results","title":"9.Display the results","text":"<pre><code>// 9. Display the results\nMap.centerObject(roi);\nMap.addLayer(comp1, {bands: ['B4','B3','B2'], min:0, max:3000}, 'True Color 1', false);\nMap.addLayer(classified1, {min:0, max:3, palette: palette}, 'Classified Jan\u2013Mar', true);\n\nMap.addLayer(comp2, {bands: ['B4','B3','B2'], min:0, max:3000}, 'True Color 2', false);\nMap.addLayer(classified2, {min:0, max:3, palette: palette}, 'Classified Jul\u2013Sep', true);\n</code></pre>"},{"location":"gee_workshop_chapter8/#10optional-accuracy-assessment-for-the-first-period","title":"10.Optional: accuracy assessment for the first period","text":"<pre><code>// 10. Optional: accuracy assessment for period 1\nvar trainTest1 = samples1.randomColumn('rnd', 42);\nvar split = 0.7;\nvar trainSet = trainTest1.filter(ee.Filter.lt('rnd', split));\nvar testSet  = trainTest1.filter(ee.Filter.gte('rnd', split));\n\nvar trainedRF = ee.Classifier.smileRandomForest(100)\n                .train({features: trainSet, classProperty: 'landcover', inputProperties: bands});\n\nvar validated = testSet.classify(trainedRF);\n\nvar testAccuracy = validated.errorMatrix('landcover', 'classification');\nprint('Confusion matrix (1st period):', testAccuracy);\nprint('Overall accuracy:', testAccuracy.accuracy());\n</code></pre>"},{"location":"gee_workshop_chapter8/#11perform-change-detection","title":"11.Perform Change Detection","text":"<p>```javascript // 11. Perform Change Detection // 11.1 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e17\u0e35\u0e48\u0e41\u0e2a\u0e14\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e1a\u0e1a \"\u0e08\u0e32\u0e01-\u0e44\u0e1b\" (From-To Change) // \u0e42\u0e14\u0e22\u0e19\u0e33\u0e04\u0e48\u0e32 class \u0e08\u0e32\u0e01 classified1 \u0e04\u0e39\u0e13 100 \u0e41\u0e25\u0e49\u0e27\u0e1a\u0e27\u0e01\u0e14\u0e49\u0e27\u0e22\u0e04\u0e48\u0e32 class \u0e08\u0e32\u0e01 classified2 // \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e44\u0e14\u0e49\u0e04\u0e48\u0e32\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e0b\u0e49\u0e33\u0e01\u0e31\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e41\u0e15\u0e48\u0e25\u0e30\u0e04\u0e39\u0e48\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e40\u0e0a\u0e48\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e44\u0e1b \u0e40\u0e21\u0e37\u0e2d\u0e07(1) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 301 // \u0e19\u0e49\u0e33(0) \u0e44\u0e1b \u0e40\u0e01\u0e29\u0e15\u0e23(2) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 2 // \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e04\u0e07\u0e40\u0e14\u0e34\u0e21\u0e40\u0e1b\u0e47\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49(3) \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 303 var fromToChange = classified1.multiply(100).add(classified2);</p> <p>// \u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e20\u0e32\u0e1e \"from-to change\" \u0e41\u0e1a\u0e1a\u0e14\u0e34\u0e1a (\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07\u0e1b\u0e23\u0e31\u0e1a min/max \u0e2b\u0e23\u0e37\u0e2d\u0e43\u0e0a\u0e49 palette \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e21\u0e32\u0e30\u0e2a\u0e21\u0e2b\u0e32\u0e01\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e41\u0e2a\u0e14\u0e07\u0e17\u0e38\u0e01\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) Map.addLayer(fromToChange, {min:0, max:404, palette: ['grey', 'yellow', 'orange', 'red']}, 'From-To Change (Raw)', false);</p> <p>// 11.2 \u0e41\u0e2a\u0e14\u0e07\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e01\u0e32\u0e23\u0e40\u0e19\u0e49\u0e19\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e40\u0e09\u0e1e\u0e32\u0e30\u0e1a\u0e32\u0e07\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 // \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49 (class 3) \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e21\u0e37\u0e2d\u0e07 (class 1) var forestToUrban = fromToChange.eq(301); // 3*100 + 1 = 301 Map.addLayer(forestToUrban.selfMask(), {palette: ['FF00FF']}, 'Change: Forest to Urban', true);</p> <p>// \u0e40\u0e0a\u0e48\u0e19 \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e08\u0e32\u0e01 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e01\u0e29\u0e15\u0e23 (class 2) \u0e44\u0e1b\u0e40\u0e1b\u0e47\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e40\u0e21\u0e37\u0e2d\u0e07 (class 1) var agricultureToUrban = fromToChange.eq(201); // 2*100 + 1 = 201 Map.addLayer(agricultureToUrban.selfMask(), {palette: ['FFA500']}, 'Change: Agriculture to Urban', false);</p> <p>// \u0e40\u0e0a\u0e48\u0e19 \u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 \u0e41\u0e25\u0e30\u0e22\u0e31\u0e07\u0e04\u0e07\u0e40\u0e1b\u0e47\u0e19 \u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49 (class 3) var stableForest = fromToChange.eq(303); // 3*100 + 3 = 303 Map.addLayer(stableForest.selfMask(), {palette: ['004D00']}, 'Stable: Forest', false);</p> <p>// 11.3 \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e20\u0e32\u0e1e\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e1a\u0e1a Binary (\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 / \u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) // \u0e42\u0e14\u0e22\u0e17\u0e35\u0e48 1 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07, 0 \u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07 var binaryChange = classified1.neq(classified2);</p> <p>// \u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e20\u0e32\u0e1e binary change (\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e35\u0e41\u0e14\u0e07\u0e04\u0e37\u0e2d\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07) Map.addLayer(binaryChange.selfMask(), {palette: ['FF0000']}, 'Binary Change (Any Change)', true);</p> <p>// 12. (\u0e40\u0e1e\u0e34\u0e48\u0e21\u0e40\u0e15\u0e34\u0e21) \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e41\u0e15\u0e48\u0e25\u0e30\u0e1b\u0e23\u0e30\u0e40\u0e20\u0e17 (\u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07)</p> <p>// \u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1f\u0e31\u0e07\u0e01\u0e4c\u0e0a\u0e31\u0e19\u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48 function calculateArea(image, geometry, scale) {   var areaImage = image.multiply(ee.Image.pixelArea());   var area = areaImage.reduceRegion({     reducer: ee.Reducer.sum(),     geometry: geometry,     scale: scale,     maxPixels: 1e13   });   return ee.Number(area.get(image.bandNames().get(0))).divide(10000); // m^2 to hectares }</p> <p>// \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e08\u0e32\u0e01\u0e1b\u0e48\u0e32\u0e44\u0e21\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e21\u0e37\u0e2d\u0e07 var areaForestToUrban_ha = calculateArea(forestToUrban, roi, 10); print('Area changed from Forest to Urban (hectares):', areaForestToUrban_ha);</p> <p>// \u0e04\u0e33\u0e19\u0e27\u0e13\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e17\u0e35\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 (binary change) var areaAnyChange_ha = calculateArea(binaryChange, roi, 10); print('Total area with any change (hectares):', areaAnyChange_ha);</p>"},{"location":"gee_workshop_chapter9/","title":"\u0e1a\u0e17\u0e17\u0e35\u0e48 9","text":""},{"location":"gee_workshop_chapter9/#91-flood-detection-using-sentinel-1-sar-data","title":"9.1 Flood Detection using Sentinel-1 SAR Data","text":"<p>Credit: UN-SPIDER</p>"},{"location":"gee_workshop_chapter9/#1-region-of-interest","title":"1.\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e1e\u0e37\u0e49\u0e19\u0e17\u0e35\u0e48\u0e28\u0e36\u0e01\u0e29\u0e32 (Region of Interest)","text":"<pre><code>// 1. Define region of interest (adjust coordinates as needed)\nvar geometry = ee.Geometry.Polygon(\n        [[[99.78173820585737, 20.530460641212706],\n          [99.78173820585737, 20.343223656107035],\n          [100.15664665312299, 20.343223656107035],\n          [100.15664665312299, 20.530460641212706]]]);\n\n// 2. Define the area of interest as a FeatureCollection\nvar aoi = ee.FeatureCollection(geometry);\n</code></pre>"},{"location":"gee_workshop_chapter9/#2","title":"2.\u0e01\u0e33\u0e2b\u0e19\u0e14\u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32\u0e17\u0e35\u0e48\u0e2a\u0e19\u0e43\u0e08","text":"<pre><code>// 3. Define date ranges for before and after flood events\nvar before_start = '2024-01-01';\nvar before_end = '2024-05-24';\nvar after_start = '2024-09-15';\nvar after_end = '2024-10-10';\n</code></pre>"},{"location":"gee_workshop_chapter9/#3-sentinel-1","title":"3.\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Sentinel-1 \u0e41\u0e25\u0e30\u0e01\u0e23\u0e2d\u0e07\u0e15\u0e32\u0e21\u0e1e\u0e32\u0e23\u0e32\u0e21\u0e34\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e01\u0e33\u0e2b\u0e19\u0e14","text":"<pre><code>// 4. Define parameters for Sentinel-1 data\nvar polarization = \"VH\"; // 'VV'  'VH' \nvar pass_direction = \"DESCENDING\"; // 'DESCENDING' \u0e2b\u0e23\u0e37\u0e2d 'ASCENDING'\n// Load and filter Sentinel-1 GRD  \nvar collection = ee.ImageCollection('COPERNICUS/S1_GRD')\n    .filter(ee.Filter.eq('instrumentMode', 'IW'))\n    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', polarization))\n    .filter(ee.Filter.eq('orbitProperties_pass', pass_direction))\n    .filter(ee.Filter.eq('resolution_meters', 10))\n    //.filter(ee.Filter.eq('relativeOrbitNumber_start',relative_orbit ))\n    .filterBounds(aoi)\n    .select(polarization);\n// Filter date\nvar before_collection = collection.filterDate(before_start, before_end);\nvar after_collection = collection.filterDate(after_start, after_end);\n\n// Create mosaics for before and after periods\nvar before = before_collection.mosaic().clip(aoi);\nvar after = after_collection.mosaic().clip(aoi);\n</code></pre>"},{"location":"gee_workshop_chapter9/#4","title":"4.\u0e04\u0e33\u0e19\u0e27\u0e13\u0e04\u0e27\u0e32\u0e21\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e02\u0e2d\u0e07\u0e2a\u0e31\u0e0d\u0e0d\u0e32\u0e13\u0e40\u0e23\u0e14\u0e32\u0e23\u0e4c\u0e23\u0e30\u0e2b\u0e27\u0e48\u0e32\u0e07\u0e2a\u0e2d\u0e07\u0e0a\u0e48\u0e27\u0e07\u0e40\u0e27\u0e25\u0e32","text":"<pre><code>// 5. Calculate the difference in backscatter between the two periods\nvar smoothing_radius = 25;\nvar before_filtered = before.focal_mean(smoothing_radius, 'circle', 'meters');\nvar after_filtered = after.focal_mean(smoothing_radius, 'circle', 'meters');\n// Define a threshold for flood detection\nvar difference_threshold = -5.5;\nvar difference_db = after_filtered.subtract(before_filtered);\nvar difference_binary = difference_db.lte(difference_threshold);\nvar flood_raw_mask = difference_db.updateMask(difference_binary);\n</code></pre>"},{"location":"gee_workshop_chapter9/#5-mask","title":"5.\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07 mask \u0e19\u0e49\u0e33\u0e17\u0e48\u0e27\u0e21\u0e42\u0e14\u0e22\u0e43\u0e0a\u0e49\u0e40\u0e01\u0e13\u0e11\u0e4c\u0e2d\u0e37\u0e48\u0e19 \u0e46","text":"<pre><code>// 6. Refine the flood mask using additional criteria\nvar swater = ee.Image('JRC/GSW1_0/GlobalSurfaceWater').select('seasonality');\nvar swater_mask = swater.gte(5).updateMask(swater.gte(5));\nvar flooded_mask = difference_binary.where(swater_mask, 0);\nvar flooded = flooded_mask.updateMask(flooded_mask);\nvar connections = flooded.connectedPixelCount();\nvar flooded = flooded.updateMask(connections.gte(8));\nvar dem = ee.Image('WWF/HydroSHEDS/03VFDEM');\nvar terrain = ee.Algorithms.Terrain(dem);\nvar slope = terrain.select('slope');\nvar flooded = flooded.updateMask(slope.lt(5));\n</code></pre>"},{"location":"gee_workshop_chapter9/#6","title":"6.\u0e41\u0e2a\u0e14\u0e07\u0e1c\u0e25\u0e25\u0e31\u0e1e\u0e18\u0e4c","text":"<pre><code>// 7. Display the results\nMap.centerObject(aoi);\nMap.addLayer(before_filtered, { min: -25, max: 0 }, 'Before Flood', 0);\nMap.addLayer(after_filtered, { min: -25, max: 0 }, 'After Flood', 1);\nMap.addLayer(difference_db, { min: -5, max: 5 }, 'Difference (dB)', 0);\nMap.addLayer(flood_raw_mask, { palette: 'blue' }, 'Flooded (raw)', 0);\nMap.addLayer(flooded, { palette: 'blue' }, 'Flooded Areas', 1);\n</code></pre>"},{"location":"gee_workshop_chapter9/#92-drought-monitoring-using-chirps-precipitation-data","title":"9.2 Drought Monitoring using CHIRPS Precipitation Data","text":""},{"location":"gee_workshop_chapter9/#1-thailand-boundary-chirps-monthly-precipitation","title":"1.\u0e42\u0e2b\u0e25\u0e14\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25 Thailand boundary \u0e41\u0e25\u0e30 CHIRPS monthly precipitation","text":"<pre><code>// 1. Load Thailand boundary\nvar thailand = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')\n    .filter(ee.Filter.eq('country_na', 'Thailand'));\n\n// 2. Load CHIRPS monthly precipitation and select the \u2018precipitation\u2019 band\nvar precip = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')\n    .select('precipitation');\n</code></pre>"},{"location":"gee_workshop_chapter9/#2calculate-standardized-precipitation-index-spi-for-3-month-periods","title":"2.Calculate Standardized Precipitation Index (SPI) for 3-month periods","text":"<pre><code>// 3. Define the \u201ccurrent\u201d 3-month period ending April 2025\nvar targetDate = ee.Date('2024-01-01');\nvar startPeriod = targetDate.advance(3, 'month');\nprint(startPeriod);\nvar current3mo = precip\n    .filterDate(targetDate, startPeriod)\n    .sum();\n</code></pre>"},{"location":"gee_workshop_chapter9/#3build-a-time-series-of-historical-3-month-sums","title":"3.Build a time series of historical 3-month sums","text":"<pre><code>// 4. Build a time series of historical 3-month sums (April\u2013June each year)\nvar years = ee.List.sequence(1981, 2023);\nvar historical3mo = ee.ImageCollection.fromImages(\n    years.map(function (y) {\n        var start = ee.Date.fromYMD(y, 1, 1);  //.advance(3, 'month');  // window start = April 1\n        var end = start.advance(3, 'month');\n\n        return precip\n            .filterDate(start, end)\n            .sum()\n            .set('system:time_start', start.millis());\n    })\n);\nprint(historical3mo);\n</code></pre>"},{"location":"gee_workshop_chapter9/#4compute-mean-and-standard-deviation-images-from-the-historical-period","title":"4.Compute mean and standard deviation images from the historical period","text":"<pre><code>// 5. Compute mean and standard deviation images from the historical period\nvar mean3mo = historical3mo.mean();\nvar stddev3mo = historical3mo.reduce(ee.Reducer.stdDev());\nprint(mean3mo);\n</code></pre>"},{"location":"gee_workshop_chapter9/#5calculate-the-spi-3-approximate-as-standardized-anomaly","title":"5.Calculate the SPI-3 (approximate) as standardized anomaly","text":"<pre><code>// 6. Calculate the SPI-3 (approximate) as standardized anomaly\nvar spi3 = current3mo\n    .subtract(mean3mo)\n    .divide(stddev3mo)\n    .clip(thailand);\n</code></pre>"},{"location":"gee_workshop_chapter9/#6visualization-parameters-for-spi","title":"6.Visualization parameters for SPI","text":"<pre><code>// 7. Visualization parameters for SPI\nvar spiVis = {\n    min: -2,\n    max: 2,\n    palette: [\n        '#d73027', // &lt;= -1.5 (severe drought)\n        '#fc8d59', // -1.5 to -1.0\n        '#fee08b', // -1.0 to -0.5\n        '#d9ef8b', // -0.5 to 0.5 (near normal)\n        '#91cf60', // 0.5 to 1.0\n        '#1a9850'  // &gt; 1.0 (wet)\n    ]\n};\n</code></pre>"},{"location":"gee_workshop_chapter9/#7display-the-spi-layer-and-add-a-legend","title":"7.Display the SPI layer and add a legend","text":"<pre><code>// 8. Display the SPI layer\nMap.centerObject(thailand, 6);\nMap.addLayer(spi3, spiVis, 'SPI-3 Apr 2024');\n\n// 9. Add a legend panel\nvar legend = ui.Panel({\n    style: {\n        position: 'bottom-left',\n        padding: '8px 15px',\n        backgroundColor: 'white',\n        fontWeight: 'bold'\n    }\n});\nlegend.add(ui.Label('SPI-3 Legend'));\n\nvar makeRow = function (color, name) {\n    var colorBox = ui.Label({\n        style: {\n            backgroundColor: color,\n            padding: '8px',\n            margin: '0 0 4px 0'\n        }\n    });\n    var description = ui.Label(name, { margin: '0 0 4px 6px' });\n    return ui.Panel([colorBox, description], ui.Panel.Layout.Flow('horizontal'));\n};\n\nvar palette = spiVis.palette;\nvar names = ['&lt;= -1.5', '-1.5 to -1.0', '-1.0 to -0.5',\n    '-0.5 to 0.5', '0.5 to 1.0', '&gt; 1.0'];\n\npalette.forEach(function (color, i) {\n    legend.add(makeRow(color, names[i]));\n});\n\nMap.addLayer(current3mo.clip(thailand), { min: 0, max: 400, palette: ['#FFFFFF', '#ADD8E6', '#0000CD', '#00008B'] }, 'current-rain');\nMap.addLayer(historical3mo.mean().clip(thailand), { min: 0, max: 500, palette: ['#FFFFFF', '#ADD8E6', '#0000CD', '#00008B'] }, '3m-rain');\nMap.add(legend);\n</code></pre>"}]}